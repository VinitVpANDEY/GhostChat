
datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                            Int              @id @default(autoincrement())
  username                      String           @unique
  email                         String           @unique
  password                      String
  groups                        UsersInGroup[]   
  notificationPermission        Boolean          @default(true)
  theme                         String           @default("light") // e.g., "light", "dark"
  groupRequestSent              GroupInvite[]    @relation("Inviter")
  groupRequestReceived          GroupInvite[]    @relation("Invitee")
  notifications                 Notification[]
}

model Group {
  id             Int             @id @default(autoincrement())
  name           String          
  createdAt      DateTime        @default(now())
  groupSize      Int
  users          UsersInGroup[]  
  messages       Message[]
  groupInvites GroupInvite[]
}

model UsersInGroup {
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  groupId     Int
  group       Group        @relation(fields: [groupId], references: [id])
  joinedAt    DateTime     @default(now())
  lastRead    DateTime     @default(now())

  @@id([userId, groupId])
}

// model Message {
//   id          Int               @id @default(autoincrement())
//   content     String
//   createdAt   DateTime          @default(now())
//   isRead      Boolean           @default(false)
//   sender      String            // random ID
//   groupId     Int       
//   group       Group             @relation(fields: [groupId], references: [id])
//   type        String            // "message", "notification"
//   // For tagged messages
//   messageId      Int?
//   taggedBy       Message?           @relation("TaggedMessages", fields: [messageId], references: [id])  // parent message
//   taggedMessages Message[]       @relation("TaggedMessages")                                            // child message
// }


model Message {
  id             Int               @id @default(autoincrement())
  content        String
  createdAt      DateTime          @default(now())
  isRead         Boolean           @default(false)
  sender         String            // random ID
  groupId        Int       
  group          Group             @relation(fields: [groupId], references: [id])
  type           String            // "message", "notification"
  // For tagged messages
  taggedBy       String?         
  taggedMessages String?                                          
}

// Consider the following data:
// id	     |  content	        |  messageId
// 1	     |  "Parent Msg"	  |  null
// 2	     |  "Tagged Msg 1"	|  1
// 3	     |  "Tagged Msg 2"	|  1

// Hereâ€™s how the relationship works:
// For the message with id = 1: taggedMessages will contain messages with id = 2 and id = 3.
// For the messages with id = 2 and id = 3: Their messageId will point to id = 1.

// In memeory: TypingIndicator


model GroupInvite {
  id          Int      @id @default(autoincrement())
  inviterId   Int      
  inviter     User     @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId   Int
  invitee     User     @relation("Invitee", fields: [inviteeId], references: [id])
  groupId     Int
  group       Group    @relation(fields: [groupId], references: [id])
  status      String   @default("PENDING")  // "PENDING", "ACCEPTED", "DECLINED"
  createdAt   DateTime @default(now())
}


model Notification {
  id            Int        @id @default(autoincrement())
  content       String     // "You have a new message" , "You have a new request"
  createdAt     DateTime   @default(now())
  read          Boolean    @default(false)
  userId        Int
  user        User       @relation(fields: [userId], references: [id])
}


